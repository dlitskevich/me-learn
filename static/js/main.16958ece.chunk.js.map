{"version":3,"sources":["services/auth.ts","services/localStorage.ts","hooks/useUser.ts","components/AuthButton.tsx","components/Navigation.tsx","components/Home.tsx","components/Error.tsx","components/UtterText.tsx","services/speak.ts","pages/LearnPage/Answer.tsx","hooks/useKeyUp.ts","pages/LearnPage/Learn.tsx","pages/LearnPage/index.tsx","pages/WordsPage/WordsTable.tsx","hooks/useUserDict.ts","pages/WordsPage/index.tsx","hooks/useRecognition.tsx","pages/TrainPage/ListenButton.tsx","pages/TrainPage/MainListenButton.tsx","pages/TrainPage/SameText.tsx","pages/TrainPage/AuxListenButton.tsx","pages/TrainPage/Speech.tsx","pages/TrainPage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","localStorage","getItem","setItem","JSON","stringify","verbs","useUser","useState","user","setUser","useEffect","auth","onAuthStateChanged","AuthButton","undefined","type","className","onClick","signOut","signInWithPopup","GoogleAuthProvider","Navigation","exact","to","activeClassName","Home","Error","UtterText","text","children","role","synth","window","speechSynthesis","utterThis","SpeechSynthesisUtterance","speak","Answer","word","content","value","keyValue","console","log","targetKey","action","upHandler","key","addEventListener","removeEventListener","useKeyUp","addWord","lang","dictString","dict","parse","Learn","refresh","style","maxWidth","answersEn","map","el","LearnPage","state","setState","getData","Object","keys","data","Math","floor","random","WordsTable","words","Row","useUserDict","snap","setSnap","firestore","collection","doc","uid","onSnapshot","docSnapshot","exists","WordsPage","getWords","recognition","webkitSpeechRecognition","continuous","interimResults","maxAlternatives","ListenButton","isLoading","success","start","stop","MainListenButton","next","SameText","phrase","recieved","onSuccess","split","recievedWords","length","samePhrase","i","color","getColor","sameWord","reduce","prev","cur","wordToNorm","toLowerCase","replace","AuxListenButton","Speech","setSuccess","setIsLoading","setText","error","setError","reset","onresult","event","results","transcript","onend","onerror","err","message","useRecognition","v","id","phrases","phrasesData","TrainPage","getPhrase","setPhrase","App","path","component","GuardedRoute","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16958ece.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyB22adg1luT9scUmBwhXUIoPTNGfHWJHiM',\n  authDomain: 'me-learn.firebaseapp.com',\n  projectId: 'me-learn',\n  storageBucket: 'me-learn.appspot.com',\n  messagingSenderId: '589740604171',\n  appId: '1:589740604171:web:574f45f58cebe24665800e',\n  measurementId: 'G-0F52F4H0B0',\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n","import verbs from '../data/enVerb.json';\n\nif (!localStorage.getItem('verbs')) {\n  localStorage.setItem('verbs', JSON.stringify(verbs));\n}\n","import { useEffect, useState } from 'react';\nimport firebase from 'firebase';\n\nexport const useUser = () => {\n  const [user, setUser] = useState<firebase.User | null>();\n  useEffect(() => firebase.auth().onAuthStateChanged(setUser), []);\n  return user;\n};\n","import React from 'react';\nimport firebase from 'firebase';\nimport { useUser } from '../hooks/useUser';\n\nexport const AuthButton = () => {\n  const user = useUser();\n\n  if (user === undefined) {\n    return null;\n  }\n  if (!user) {\n    return (\n      <button type=\"button\" className=\"btn btn-outline-success my-2 my-sm-0\" onClick={() => { firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()); }}>\n        Log in\n      </button>\n    );\n  }\n  return (\n    <button type=\"button\" className=\"btn btn-outline-danger my-2 my-sm-0\" onClick={() => { firebase.auth().signOut(); }}>\n      Log out\n    </button>\n  );\n};\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\nimport { AuthButton } from './AuthButton';\n\nexport const Navigation = () => (\n\n  <nav className=\"navbar nav-pills sticky-top\">\n    <div className=\"container-fluid\">\n      <ul className=\"nav\">\n        <li className=\"nav-item\">\n          <NavLink exact to=\"/\" className=\"nav-link\" activeClassName=\"active\">Home</NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink to=\"/learn\" className=\"nav-link\" activeClassName=\"active\">Learn</NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink to=\"/words\" className=\"nav-link\" activeClassName=\"active\">Words</NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink to=\"/train\" className=\"nav-link\" activeClassName=\"active\">Train</NavLink>\n        </li>\n      </ul>\n      <ul className=\"nav navbar-right\">\n        <li className=\"nav-item\">\n          <AuthButton />\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n","import React from 'react';\n\nexport const Home = () => (\n  <div>\n    <h1>Home</h1>\n    <p>Home page body content</p>\n  </div>\n);\n","import React from 'react';\n\nexport const Error = () => (\n  <div>\n    <p>Error: Page does not exist!</p>\n  </div>\n);\n","import React from 'react';\nimport { speak } from '../services/speak';\nimport './index.css';\n\ninterface Props{\n  text:string, children:React.ReactNode\n}\nexport const UtterText = ({ text, children }:Props) => (\n  <div role=\"tooltip\" className=\"speakWord\" onClick={() => speak(text)}>\n    {children}\n  </div>\n);\n","export const speak = (text:string) => {\n  const synth = window.speechSynthesis;\n  const utterThis = new SpeechSynthesisUtterance(text);\n  synth.speak(utterThis);\n};\n","import React from 'react';\nimport { useKeyUp } from '../../hooks/useKeyUp';\nimport './index.css';\n\ninterface Props{\n  word:string,\n  content: string,\n  value: number,\n  keyValue: number,\n  onClick: ()=>void\n}\nexport const Answer = ({ word, content, value, keyValue, onClick }:Props) => {\n  console.log(keyValue);\n  useKeyUp(`${keyValue}`, () => { addWord(word, value); onClick(); });\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-lg btn-outline-primary\"\n      onClick={() => { addWord(word, value); onClick(); }}\n    >\n      <div className=\"container d-flex p-0\">\n\n        <span className=\"keyValue\">{keyValue}</span>\n        <span>{content}</span>\n      </div>\n    </button>\n  );\n};\n\nconst addWord = (word:string, value:number, lang = 'en') => {\n  const dictString = localStorage.getItem(`${lang}_words`);\n  if (dictString) {\n    const dict = JSON.parse(dictString);\n    dict[word] = value;\n    localStorage.setItem(`${lang}_words`, JSON.stringify(dict));\n  } else {\n    localStorage.setItem(`${lang}_words`, JSON.stringify({ [word]: value }));\n  }\n};\n\n// const addWord = (word:string, value:number, lang = 'en') => {\n//   firebase.auth().onAuthStateChanged((user) => {\n//     if (user) {\n//       const db = firebase.firestore();\n//       const docRef = db.collection('users').doc(user.uid).collection(`${lang}Dict`).doc(word);\n\n//       docRef.get()\n//         .then((docSnapshot) => {\n//           if (docSnapshot.exists) {\n//             docRef.update({\n//               understanding: value,\n//             });\n//           } else {\n//             docRef.set({ understanding: value });\n//           }\n//         });\n//     }\n//   });\n// };\n","import { useEffect } from 'react';\n\nexport const useKeyUp = (targetKey:string, action:()=>void) => {\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      action();\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('keyup', upHandler);\n    return () => window.removeEventListener('keyup', upHandler);\n  }, []);\n};\n","import React from 'react';\nimport { UtterText } from '../../components/UtterText';\n\nimport { Answer } from './Answer';\n\ninterface Props{\n  word:string,\n  refresh: ()=>void\n}\n\nexport const Learn = ({ word, refresh }:Props) => (\n  <div className=\"container\" style={{ maxWidth: '768px' }}>\n    <h1>\n      <UtterText text={word}>\n        <span>{word}</span>\n      </UtterText>\n    </h1>\n    {/* hint */}\n    <div className=\" mt-3 d-flex justify-content-between\">\n      {answersEn.map((el) => <Answer key={`${word}${el.value}`} keyValue={el.key} onClick={refresh} word={word} content={el.content} value={el.value} />)}\n    </div>\n  </div>\n);\n\nconst answersEn = [\n  {\n    content: 'Surely, know',\n    value: 100,\n    key: 1,\n  },\n  {\n    content: 'Hesitate',\n    value: 50,\n    key: 2,\n  },\n  {\n    content: \"Don't know\",\n    value: 1,\n    key: 3,\n  },\n];\n","import React, { useState } from 'react';\nimport { Learn } from './Learn';\n\ninterface Verb{\n  verb: string,\n  verb2: string,\n  verb3: string,\n  gerund: string,\n  '1st'?: string,\n  '2nd'?: string,\n  '3rd'?: string,\n  '3rdPret'?: string\n}\n\ninterface Verbs{\n  _version:number,\n  data:{[word:string]:Verb}\n}\n\nexport const LearnPage = () => {\n  const [state, setState] = useState(false);\n  const refresh = () => {\n    setState(!state);\n  };\n  return (\n    <Learn word={getData()} refresh={refresh} />\n  );\n};\n\nconst dict:Verbs = JSON.parse(localStorage.getItem('verbs') || '{}');\n\nconst getData = () => {\n  console.log(Object.keys(dict.data)[2]);\n\n  return Object.keys(dict.data)[Math.floor(100 * Math.random())];\n};\n","import React from 'react';\n\nimport { WordData } from '../../types';\n\ninterface Props{\n  words:WordData[]\n}\nexport const WordsTable = ({ words }:Props) => (\n  <div className=\"container\">\n    { words\n      ? (\n        <div className=\"container\">\n          {words.map((el) => <Row key={`word${el.value}`} word={el.word} value={el.value} />)}\n        </div>\n      )\n      : null}\n  </div>\n);\n\nconst Row = ({ word, value }:WordData) => (\n  <div className=\"row\">\n    <p>{word + value}</p>\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport firebase from 'firebase';\nimport { useUser } from './useUser';\n\nexport const useUserDict = (lang:string) => {\n  const user = useUser();\n  const [snap, setSnap] = useState<firebase.firestore.DocumentData>();\n  useEffect(() => {\n    if (user) {\n      const db = firebase.firestore();\n      const docRef = db.collection('userDict').doc(`${lang}_${user.uid}`);\n\n      docRef.onSnapshot((docSnapshot) => {\n        if (docSnapshot.exists) {\n          setSnap(docSnapshot.data());\n        }\n      });\n    }\n  },\n  [user]);\n\n  return snap;\n};\n","import React from 'react';\nimport { WordsTable } from './WordsTable';\nimport { WordData } from '../../types';\nimport { useUserDict } from '../../hooks/useUserDict';\n\nexport const WordsPage = () => (\n  <WordsTable words={getWords()} />\n);\n\nconst getWords = (lang = 'en') => {\n  const data : WordData[] = [];\n  const dict = useUserDict(lang);\n  console.log(dict);\n\n  console.log(data);\n\n  return data;\n};\n","/* eslint-disable no-undef */\nimport { useState } from 'react';\n\n// eslint-disable-next-line new-cap\nconst recognition = new webkitSpeechRecognition();\nrecognition.continuous = false;\nrecognition.lang = 'en-US';\nrecognition.interimResults = true;\nrecognition.maxAlternatives = 1;\n\nexport const useRecognition = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [text, setText] = useState('');\n  const [error, setError] = useState<Error>();\n\n  const start = () => {\n    if (!recognition) {\n      setError(new Error('Not supported'));\n    }\n    if (text) { reset(); }\n\n    recognition.onresult = (event) => {\n      setText(event.results[0][0].transcript);\n    };\n    recognition.onend = () => setIsLoading(false);\n    recognition.onerror = (err) => { setError(new Error(err.message)); setIsLoading(false); };\n\n    if (!isLoading) {\n      try {\n        recognition.start();\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const stop = () => {\n    if (isLoading) {\n      setIsLoading(false);\n      recognition.stop();\n    }\n  };\n\n  const reset = () => {\n    stop();\n    setText('');\n    setError(undefined);\n  };\n\n  return { text, error, isLoading, start, stop, reset };\n};\n","import React from 'react';\n\ninterface Props{\n    // eslint-disable-next-line no-undef\n    success:boolean|undefined,\n    isLoading: boolean,\n    start: ()=>any,\n    stop: ()=>any\n\n}\n\nexport const ListenButton = ({ isLoading, success, start, stop }:Props) => {\n  if (isLoading) {\n    return (\n      <button type=\"button\" className=\"btn btn-danger\" onClick={stop}>\n        Stop recording\n      </button>\n    );\n  }\n  if (success === undefined) {\n    return (\n      <button type=\"button\" className=\"btn btn-primary\" onClick={start}>\n        Start recording\n      </button>\n    );\n  }\n  return (\n    <button type=\"button\" className={success ? 'btn btn-primary' : 'btn btn-danger'} onClick={start}>\n      Try again\n    </button>\n  );\n};\n","import React from 'react';\nimport { ListenButton } from './ListenButton';\n\ninterface Props{\n    success:boolean|undefined,\n    isLoading: boolean,\n    start: ()=>any,\n    stop: ()=>any,\n    next: ()=>any\n\n}\n\nexport const MainListenButton = ({ isLoading, success, start, stop, next }:Props) => {\n  if (isLoading || !success) {\n    return <ListenButton isLoading={isLoading} start={start} stop={stop} success={success} />;\n  }\n\n  return (\n    <button type=\"button\" className=\"btn btn-success\" onClick={next}>\n      Next\n    </button>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { UtterText } from '../../components/UtterText';\n\ninterface Props{\n    phrase:string,\n    recieved: string,\n    // eslint-disable-next-line no-unused-vars\n    onSuccess: (v:boolean) => void\n}\n\nexport const SameText = ({ phrase, recieved, onSuccess }:Props) => {\n  const words = phrase.split(' ');\n  const recievedWords = recieved ? recieved.split(' ') : [];\n  useEffect(() => {\n    if (recievedWords.length) {\n      onSuccess(samePhrase(words, recievedWords));\n    }\n  });\n  return (\n    <div className=\"container d-flex flex-wrap\">\n      {words.map((el, i) => (\n        <UtterText key={el} text={el}>\n          <span style={{ color: getColor(el, i, recievedWords) }}>{`${el}`}</span>\n        </UtterText>\n      ))}\n    </div>\n  );\n};\n\nconst getColor = (word:string, i:number, recievedWords:string[]) => {\n  if (i < recievedWords.length) {\n    return sameWord(word, recievedWords[i]) ? 'green' : 'red';\n  }\n  return 'black';\n};\n\nconst samePhrase = (words:string[], recievedWords:string[]) => {\n  if (words.length > recievedWords.length) {\n    return false;\n  }\n  // eslint-disable-next-line max-len\n  const sameCount = words.reduce((prev, cur, i) => prev + (sameWord(cur, recievedWords[i]) ? 1 : 0), 0);\n  return sameCount / words.length > 0.7;\n};\n\nconst sameWord = (word:string, recieved:string) => wordToNorm(word) === wordToNorm(recieved);\n\nconst wordToNorm = (word:string) => word.toLowerCase().replace(/[.,!?()]/g, '');\n","import React from 'react';\n\ninterface Props{\n    success:boolean|undefined,\n    isLoading: boolean,\n    start: ()=>any,\n    next: ()=>any\n\n}\n\nexport const AuxListenButton = ({ isLoading, success, start, next }:Props) => {\n  if (isLoading) {\n    return null;\n  }\n  if (!isLoading && success) {\n    return (\n      <button type=\"button\" className=\"btn btn-outline-primary\" onClick={start}>\n        Try again\n      </button>\n    );\n  }\n\n  return (\n    <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={next}>\n      Skip\n    </button>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { useRecognition } from '../../hooks/useRecognition';\nimport { MainListenButton } from './MainListenButton';\nimport { SameText } from './SameText';\nimport './index.css';\nimport { AuxListenButton } from './AuxListenButton';\n\ninterface Props{\n  phrase:string,\n  refresh: ()=>void\n}\n\nexport const Speech = ({ phrase, refresh }:Props) => {\n  const [success, setSuccess] = useState<boolean|undefined>();\n  const succeed = (v:boolean) => { setSuccess(v); };\n  const { text, isLoading, start, stop, reset } = useRecognition();\n  const next = () => {\n    if (!isLoading) {\n      reset(); refresh(); setSuccess(undefined); start();\n    }\n  };\n\n  return (\n    <div className=\"container\" style={{ maxWidth: '768px' }}>\n      <h1>\n        <SameText phrase={phrase} recieved={text} onSuccess={succeed} />\n      </h1>\n      <p>{text}</p>\n      <div id=\"control-panel\">\n        <div className=\"mb-2 d-flex justify-content-center\">\n          <AuxListenButton isLoading={isLoading} start={start} next={next} success={success} />\n        </div>\n        <div className=\"btn-main-container btn-block mb-2\">\n          <MainListenButton isLoading={isLoading} start={start} stop={stop} next={next} success={success} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Speech } from './Speech';\nimport * as phrasesData from '../../data/phrases.json';\n\nconst phrases = phrasesData.data;\n\nexport const TrainPage = () => {\n  const [phrase, setPhrase] = useState(getPhrase());\n  const refresh = () => {\n    setPhrase(getPhrase());\n  };\n  return (\n    <Speech phrase={phrase} refresh={refresh} />\n  );\n};\n\nconst getPhrase = () => phrases[Math.floor(Math.random() * phrases.length)];\n","import React from 'react';\nimport { HashRouter, Route, RouteProps, Switch } from 'react-router-dom';\nimport './App.css';\nimport './services/auth';\nimport './services/localStorage';\nimport { Navigation } from './components/Navigation';\nimport { Home } from './components/Home';\nimport { Error } from './components/Error';\nimport { LearnPage } from './pages/LearnPage';\nimport { WordsPage } from './pages/WordsPage';\nimport { useUser } from './hooks/useUser';\nimport { TrainPage } from './pages/TrainPage';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <>\n        <Navigation />\n        <div className=\"app container\">\n          <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <GuardedRoute path=\"/learn\" component={LearnPage} />\n            <GuardedRoute path=\"/words\" component={WordsPage} />\n            <Route path=\"/train\" component={TrainPage} />\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </>\n    </HashRouter>\n  );\n}\n\nexport default App;\n\nconst GuardedRoute : React.FC<RouteProps> = ({ component, ...props }) => {\n  const user = useUser();\n  if (!user) {\n    return <Route {...props} component={Home} />;\n  }\n  return (\n    <Route {...props} component={component} />\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}